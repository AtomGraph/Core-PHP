REQUIREMENTS

PHP 5.3 or later. Might work on earlier PHP 5.x versions.
Java version is in the works.

DESCRIPTION

* Supports JAX-RS-style RESTful API
** resource annotations like @Path and @GET
** UriBuilder for building URIs out of components
** ResponseBuilder for building Response objects
Further implementation of missing JAX-RS annotations and components is planned.
More on JAX-RS: https://wikis.oracle.com/display/Jersey/Overview+of+JAX-RS+1.0+Features

* Supports Jena-style object-oriented RDF API
** Model
*** RDF/XML (DOM) serialization
*** Turtle serialization
** Statement
** Resource
** Literal
More on Apache Jena: http://incubator.apache.org/jena/

* Includes utility classes for dealing with SPARQL, RDF/XML, and XSLT:
** Repository for remote SPARQL 1.1 endpoint access
** QueryBuilder for building SPARQL queries
** XSLTBuilder for building XSLT transformations
** DOM2Model for converting RDF/XML to Model (reverse of Model::toDOM())

USAGE

To create a Graphity PHP application:

1. Checkout or extract graphity-core into /lib/graphity-core or similar folder in your project.
We recommend choosing the latest version tag on GitHub.
Note: we also strongly recommend Maven directory structure, as it will be easier to share reusable resources with the Java version in
the future.

2. Create some Resource class that imports and extends Graphity\Resource, for example:

    use Graphity\Resource;

    class MyResource extends Resource

3. Annotate the class with @Path and methods with @GET/@POST etc., for example:

    namespace My;

    use Graphity\Response;
    use Graphity\ResponseBuilder;
    use Graphity\View\ContentType;

    /** 
     * @Path("/{path}")
     */
    class Resource extends \Graphity\Resource
    {

        /**
         * @GET
         * @Produces("text/html")
         */
        public function getResponse()
        {
            return ResponseBuilder::newInstance()->
                entity("<html>Hello world!</html>")->
                status(Response::SC_OK)->
                type(ContentType::TEXT_HTML)->
                build();
        }
    }

Note: @Produces/@Consumes annotations are not yet supported, but we recommend adding them for future compatibility.

4. Run /lib/graphity-core/bin/route_mapper.php from the root folder of your Resource classes, specifying the location of your route file, for example:


This should generate a route file, which is used internally by Graphity to match request URIs against JAX-RS annotations.
Note: this does not happen dynamically (as of yet), you have to re-map routes with route_mapper every time your annotations change.

4. Run /lib/graphity-core/bin/route_mapper.php from the root folder of your Namespace classes, specifying the location of your route file, for example:

$ cd ~/MyProject
$ php lib/graphity-core/bin/route_mapper.php src/MyNamespace src/routes.php
[21:04:23] Julius: assuming you have cloned graphity-core to lib/graphity-core (or added as a git submodule).